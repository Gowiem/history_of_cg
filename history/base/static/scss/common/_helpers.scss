.ir {
    display: inline-block;
    text-align: left;
    text-indent: -9999em;
}

.univers {
    font-family: "UniversCondensed", Arial, sans-serif;
}

.univers-oblique {
    font-family: "UniversCondensedOblique", Arial, sans-serif;
}

/* Contain floats: nicolasgallagher.com/micro-clearfix-hack/ */
.clearfix:before, .clearfix:after { content: ""; display: table; }
.clearfix:after { clear: both; }
.clearfix { zoom: 1; }
.clear { clear: both }

.customize, .role-block {
    display: none !important;
}

.row, .row-fluid {
    .alpha {
        margin-left: 0;
    }
}

.center {
    margin: 0 auto;
}

.align-left {
    text-align: left;
}

.align-center {
    text-align: center;
}

.align-right {
    text-align: right;
}

@mixin title-block($fontSize: 16px) {
    @extend .univers;
    @extend .black-trans-back;
    color: $white;
    display: block;
    font-size: $fontSize;
    padding: $gridGutterWidth * .75 $gridGutterWidth;
    text-decoration: none;
    z-index: 0;
}

/* alternate float classes (instead of pull-$direction as they are affected by @media) */
.float-right { float: right; }
.float-left { float: left; }

.buffer-after {
    margin-right: 10px;
}

label.buffer-after {
    margin-right: 18px;
}

.inline-block {
    display: inline-block;
}

.upper {
    text-transform: uppercase;
}

@mixin min-height($height:200px) {
    min-height: $height !important;
    height: $height;
    height: auto;
}

.cloaked {
    height: 0;
    margin: 0 !important;
    overflow: hidden;
    padding: 0 !important;
    position: relative;
    width: 0;
}

.min-height-fifty {
    @include min-height(50px);
}

.min-height-one {
    @include min-height(100px);
}

.min-height-onefifty {
    @include min-height(150px);
}

.min-height-two {
    @include min-height(200px);
}

.min-height-three {
    @include min-height(300px);
}

.min-height-four {
    @include min-height(400px);
}

.min-height-five {
    @include min-height(500px);
}

.min-height-seven {
    @include min-height(1122px);
}

.min-height-nine {
    @include min-height(1122px);
}

.min-height-eleven {
    @include min-height(1122px);
}

@mixin max-height($height:200px) {
    max-height: $height !important;
    height: $height;
    overflow: hidden;
}

@mixin max-width($width:300px) {
    width: $width;
    max-width: $width;
}

.max-height-one {
    @include max-height(100px);
}

.max-height-onefifty {
    @include max-height(150px);
}

.max-height-two {
    @include max-height(200px);
}

.max-height-three {
    @include max-height(300px);
}

.max-height-four {
    @include max-height(400px);
}

.max-height-five {
    @include max-height(500px);
}

.max-height-six {
    @include max-height(600px);
}

.overflow-y {
    overflow-y: scroll;

    &::-webkit-scrollbar {
        -webkit-appearance: none;
        width: 11px;
        height: 11px;
    }

    &::-webkit-scrollbar-thumb {
        border-radius: 8px;
        border: 2px solid white; /* should match background, can't be transparent */
        background-color: rgba(0, 0, 0, .5);
    }
}

form .overflow-y {
    border: 1px solid $grayLight;
    padding: $gridGutterWidth;
}

.must-scroll {
    @extend .overflow-y;
    @extend .max-height-two;
    @extend .pad-all;
    border: 1px solid $grayLighter;
}

.spacer {
    display: inline-block;
    height: $gridGutterWidth;
    text-align: center;
    width: $gridGutterWidth;

    &.small {
        width: $gridGutterWidth / 4;
    }
}

.darkbg {
    color: $white;

    h1, h2, h3, h4, a, p, span, div, label, .form-label {
        color: $white;
    }
    a.btn {
        &.btn-info {
            color: $blue;
        }
    }

    a:hover {
        color: $white;
    }

    .modal-header, .modal-body {
        h1, h2, h3, h4, a, p, span, div {
            color: $black;
        }
    }
}

.small-radius {
    @include border-radius(3px);
}

.medium-radius {
    @include border-radius(6px);
}

.large-radius {
    @include border-radius(9px);
}

.border-bottom {
    border-bottom: 1px solid $grayLight;
    margin-bottom: $gridGutterWidth;
    padding-bottom: 5px;
}

.text-white {
    color: $white !important;
}

.text-blue {
    color: $blue !important;
}

.white {
    background-color: $white;
    color: $textColor;

    h1, h2, h3, h4, a {
        color: $textColor;
    }

    a:hover {
        color: $linkColorHover;
    }
}

.bg-hero {
    background-color: $heroUnitBackground;
}

.bg-graydark {
    @extend .darkbg;
    background-color: $grayDark;
}

.bg-graymedium {
    background-color: $grayMedium;
}

.bg-gray {
    background-color: $grayLight;
    color: $gray;
}

.bg-graylight {
    background-color: $grayLighter;
}

.bg-black {
    @extend .darkbg;
    background-color: $black;
}

.bg-red {
    background-color: red;
}

.bg-blue {
    @extend .darkbg;
    background-color: $blue;
}

.bg-gray, .bg-graydark, .bg-graylight, .bg-graymedium, .bg-black, .bg-blue {
    .border-bottom {
        border-bottom: 1px solid $white;
    }
}

.bg-alabaster {
    background-color: $alabaster;
}

.black-trans-back {
    background: url('/static/img/layer_bck.png') repeat scroll 0 0 transparent;
    filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled=true, sizingMethod=scale, src='/static/img/layer_bck.png');
}

.black-trans-back-light {
    background: url('/static/img/layer_bck_light.png') repeat scroll 0 0 transparent;
    filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled=true, sizingMethod=scale, src='/static/img/layer_bck_light.png');
}

.pad-all {
    padding: $gridGutterWidth;

    &.double {
        padding: $gridGutterWidth * 2;
    }

    &.half {
        padding: $gridGutterWidth / 2;
    }

    &[class*="span"] {
        padding-left: 0;
    }
}

.hide {
    &[class*="span"] {
        display: none;
    }
}

.pad-top { padding-top: $gridGutterWidth; }
.pad-bottom { padding-bottom: $gridGutterWidth; }
.pad-right { padding-right: $gridGutterWidth; }
.pad-left { padding-left: $gridGutterWidth; }
.pad-tb { padding-top: $gridGutterWidth; padding-bottom: $gridGutterWidth; }
.pad-tr { padding-top: $gridGutterWidth; padding-right: $gridGutterWidth; }
.pad-trb { padding-top: $gridGutterWidth; padding-right: $gridGutterWidth; padding-bottom: $gridGutterWidth; }
.pad-trl { padding-top: $gridGutterWidth; padding-right: $gridGutterWidth; padding-left: $gridGutterWidth; }
.pad-tbl { padding-top: $gridGutterWidth; padding-bottom: $gridGutterWidth; padding-left: $gridGutterWidth; }
.pad-tl { padding-top: $gridGutterWidth; padding-left: $gridGutterWidth; }
.pad-rb { padding-right: $gridGutterWidth; padding-bottom: $gridGutterWidth; }
.pad-rbl { padding-right: $gridGutterWidth; padding-bottom: $gridGutterWidth; padding-left: $gridGutterWidth; }
.pad-rl { padding-right: $gridGutterWidth; padding-left: $gridGutterWidth; }
.pad-bl { padding-bottom: $gridGutterWidth; padding-left: $gridGutterWidth; }

.margin-top { margin-top: $gridGutterWidth; }
.margin-bottom { margin-bottom: $gridGutterWidth; }
.margin-right { margin-right: $gridGutterWidth; }
.margin-left { margin-left: $gridGutterWidth; }
.margin-tb { margin-top: $gridGutterWidth; margin-bottom: $gridGutterWidth; }
.margin-tr { margin-top: $gridGutterWidth; margin-right: $gridGutterWidth; }
.margin-trb { margin-top: $gridGutterWidth; margin-right: $gridGutterWidth; margin-bottom: $gridGutterWidth; }
.margin-trl { margin-top: $gridGutterWidth; margin-right: $gridGutterWidth; margin-left: $gridGutterWidth; }
.margin-tbl { margin-top: $gridGutterWidth; margin-bottom: $gridGutterWidth; margin-left: $gridGutterWidth; }
.margin-tl { margin-top: $gridGutterWidth; margin-left: $gridGutterWidth; }
.margin-rb { margin-right: $gridGutterWidth; margin-bottom: $gridGutterWidth; }
.margin-rbl { margin-right: $gridGutterWidth; margin-bottom: $gridGutterWidth; margin-left: $gridGutterWidth; }
.margin-rl { margin-right: $gridGutterWidth; margin-left: $gridGutterWidth; }
.margin-bl { margin-bottom: $gridGutterWidth; margin-left: $gridGutterWidth; }

.pad-all, .pad-top, .pad-trb, .pad-tbl, .pad-trl {
    h1, h2, h3 {
        margin-top: 0px;
    }
}

.pad-all-fluid { padding: $fluidGridGutterWidth; }
.pad-rl-fluid { padding: 0% $fluidGridGutterWidth; }
.pad-tb-fluid { padding: $fluidGridGutterWidth 0%; }


@mixin radius-top($radius: 5px) {
    -webkit-border-top-right-radius: $radius;
    -moz-border-radius-topright: $radius;
    border-top-right-radius: $radius;
    -webkit-border-top-left-radius: $radius;
    -moz-border-radius-topleft: $radius;
    border-top-left-radius: $radius;
}

@mixin radius-bottom($radius: 5px) {
    -webkit-border-bottom-right-radius: $radius;
    -moz-border-radius-bottomright: $radius;
    border-bottom-right-radius: $radius;
    -webkit-border-bottom-left-radius: $radius;
    -moz-border-radius-bottomleft: $radius;
    border-bottom-left-radius: $radius;
}

@mixin radius-right($radius: 5px) {
    -webkit-border-top-right-radius: $radius;
    -moz-border-radius-topright: $radius;
    border-top-right-radius: $radius;
    -webkit-border-bottom-right-radius: $radius;
    -moz-border-radius-bottomright: $radius;
    border-bottom-right-radius: $radius;
}

$i: $gridColumns;
@while $i > 0 {
    .grid#{$i}Width {
        min-width: ($fluidGridColumnWidth * $i) + ($fluidGridGutterWidth * ($i - 1));
        width: ($fluidGridColumnWidth * $i) + ($fluidGridGutterWidth * ($i - 1));
    }
    $i: $i - 1;
}

@mixin fluid-grid-width($columns) {
    max-width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1));
    min-width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1));
    width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1));
}

.sortable {
    th { cursor: s-resize; }
    th.headerSortUp { cursor: n-resize; }
}

// Button backgrounds
// ------------------
@mixin napaButtonBackground($startColor, $endColor) {
    background-color: $startColor;
    *background-color: $endColor; /* Darken IE7 buttons by default so they stand out more given they won't have borders */

    &:hover, &:active, &.active, &.disabled, &[disabled] {
        background-color: $endColor;
        *background-color: darken($endColor, 5%);
    }

// IE 7 + 8 can't handle box-shadow to show active, so we darken a bit ourselves
    &:active,
    &.active {
        background-color: darken($endColor, 10%) \9;
    }
}

.loading {
    background: url('/static/img/spinner-dark.gif') no-repeat scroll center center transparent;
}

.secondary {
    color: $gray;
}

.blocks {
    position: relative;

    div {
        background-color: $grayLighter;
        border: 1px solid $grayLight;
        line-height: 100%;
        vertical-align: middle;
    }
}

.row-fluid {
    .nav-pills {
        margin-bottom: 0;
    }
}

.underline {
    text-decoration: underline !important;
}

.no-margin {
    margin: 0 !important;
}

.fb-comments-count {
    display: inline-block;
}